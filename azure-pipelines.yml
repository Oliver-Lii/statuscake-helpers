# Build Pipeline
variables:
  psmversion: 4.0.$(Build.Buildid)
  psmodulename: "statuscake-helpers"

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - /StatusCake-Helpers

stages:
- stage: Build
  pool:
    # What environment will the build agent run on? (Windows / Linux / macOS)
    vmImage: "vs2017-win2016"

  jobs:
    - job: Build_PS_Win2016
      displayName: "Build - Windows Server 2016"

      steps:
        # Build Tasks
        - powershell: |
            .\Build\build.ps1 -ResolveDependency -TaskList 'Init'
          displayName: "Install Dependencies"

        - powershell: |
            .\Build\build.ps1 -TaskList 'CombineFunctionsAndStage'
          displayName: "Combine PowerShell functions into single module file"

        - powershell: |
            .\Build\build.ps1 -TaskList 'Analyze'
          displayName: "Analyze"

        - powershell: |
            .\Build\build.ps1 -TaskList 'Test'
          displayName: "Test"
          env:
            StatusCake_API_Key: $(SCAPIKEY)
            StatusCake_Username: $(SCUSERNAME)

        - powershell: |
            .\Build\build.ps1 -TaskList 'UpdateDocumentation'
          displayName: "Update Documentation"

        - powershell: |
            .\Build\build.ps1 -TaskList 'CreateBuildArtifact'
          displayName: "Create Build Artifact"

        # Publish Tasks
        - task: PublishTestResults@2
          displayName: "Publish Pester Tests"
          inputs:
            testRunner: "NUnit"
            searchFolder: "Artifacts"
            testRunTitle: "PesterTests-Win2016"
          condition: always()

        - task: PublishBuildArtifacts@1
          displayName: "Publish Artifact: PowerShell Module Zipped for offline use"
          inputs:
            PathtoPublish: Artifacts
            ArtifactName: Artifacts
          condition: always()

        - task: PublishBuildArtifacts@1
          displayName: "Publish Artifact: PowerShell Module"
          inputs:
            PathtoPublish: Staging
            ArtifactName: PSModule
          condition: always()

- stage: Publish
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  pool:
    # What environment will the build agent run on? (Windows / Linux / macOS)
    vmImage: "vs2017-win2016"
  jobs:
  - job: "Publish_PS_Win2016"
    displayName: "Publish - Windows Server 2016"
    steps:
      - checkout: self
        persistCredentials: true
        clean: true

      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          artifactName: 'PSModule'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet 5.4.0'
        inputs:
          versionSpec: 5.4.0

      - task: NuGetAuthenticate@0
        displayName: 'NuGet Authenticate'

      - powershell: |
          $ModuleFolderPath = (Join-Path -Path $env:BUILD_STAGINGDIRECTORY -ChildPath "PSModule\$env:PSModuleName")
          $publishParams = @{
              Path        = $ModuleFolderPath
              NugetApiKey = $env:NugetApiKey
              Force       = $true
              Verbose     = $true
          }
          Publish-Module @publishParams
        env:
          NugetApiKey: $(PSGALLERY_API_KEY)
          PSModuleName: $(psmodulename)
        displayName: "Publish To Powershell Gallery"

      - powershell: |
          .\Build\Update-RepoMarkdownDocs.ps1 -ModuleName $env:PSModuleName
        displayName: 'Update Repository Markdown Documentation'
        env:
          PSModuleName: $(psmodulename)

      # Publish to Azure Devops Artifact Feed
      #- powershell: |
      #    .\Build\build.ps1 -TaskList 'PublishToAzDOArtifactFeed'
      #  displayName: "Publish Module To Azure DevOps Artifact Feed"
      #  env:
      #    AzDOAccountName: oliverli0875
      #    AzDOArtifactFeedName: prod-helpers
      #    AzDOProjectID: $(System.TeamProject)

